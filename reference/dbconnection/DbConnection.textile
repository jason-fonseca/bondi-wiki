h2(#summary). Summary

Constructable object in [[Bondi|Bondi Reference]]

h2(#syntax). Syntax

```javascript
var dbconn = new DbConnection("sqlite:test.db");
var dbconn = new DbConnection("sqlite::memory:");
var dbconn = new DbConnection("odbc:");
```

h2(#parameters). Parameters

h2(#description). Description

h2(#properties). Properties

- EvalContext := Pass an object hash with functions or values which can then be eval()'ed within a SQL
- Identity (read-only) := Returns the identity value on the most recent command execution, if it applies.
- ReadOnly := Either "true" or "false".
- RowPrototype
- RowsAffected (read-only)
- RowsetPrototype
- Tables (read-only) :=

=:

h2(#methods). Methods

- BeginTrans() := Starts a database transaction.
- Close() := Closes the DbConnection.
- CommitTrans() := Commits current transaction.
- Execute(command, args) := Executes command and returns a [[DbRecordset]] if there are results, passes args for positional params in command.
- ExecuteCallback(command, args, function) := Executes function for every row, passing in the Row, RowIndex and ResultSetIndex as arguments to function, takes args for positional params in command.
- ExecuteScalar(command, args) := Executes command and returns a single result, passes args for positional params in command.
- ExecuteStream(command, args) := Executes command and returns a stream of resulting data, passes args for positional params in command.
- RollbackTrans() := Rolls back current transaction.

h2(#examples). Examples

```javascript
var dbConn = new DbConnection("sqlite::memory:");

var result = dbConn.ExecuteScalar("SELECT 1 + 1;");
dbConn.BeginTrans();
dbConn.Execute("CREATE TABLE IF NOT EXISTS testycool ( id INTEGER NOT NULL AUTOINCREMENT)");
dbConn.CommitTrans();
```

<pre><code>Db.EvalContent = { 
  PriceIncTax : PriceIncTax
};</code></pre>

h2(#seealso). See also

* [[DbCommand]]
* [[DbParameters]]
* [[DbRecordset]]