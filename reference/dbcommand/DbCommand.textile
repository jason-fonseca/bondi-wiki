h2(#summary). Summary

Constructable object in [[Bondi|Bondi Reference]]

h2(#syntax). Syntax

@var dbCmd = new DbCommand();@

h2(#description). Description

h2(#properties). Properties

- CommandText := Set the SQL command to use, or retrieve the command.
- CommandTimeout := Not implemented.
- Connection := Set the database connection to use, or retrieve the connection.
- Parameters := Set an array of parameter objects with properties: Type, Value used to provide data to positional params in the CommandText.
- RowPrototype
- RowsetPrototype

h2(#methods). Methods

- Execute() := Executes command and returns a [[DbRecordset]] if there are results, passes args for positional params in CommandText from the Parameters property.
- ExecuteScalar() := Executes command and returns a single result, passes args for positional params in CommandText from the Parameters property.
- ExecuteStream() := Executes command and returns a stream of resulting data, passes args for positional params in CommandText from the Parameters property. The returned stream has the following method: Close(), and properties: Position, Size.
- ExecuteCallback(function) := Executes function for every row, passing in the Row, RowIndex and ResultSetIndex as arguments to function, takes args for positional params in CommandText from the Parameters property.

h2(#examples). Examples

```javascript
var dbConn = new DbConnection("sqlite::memory:");
dbConn.Execute("CREATE TABLE IF NOT EXISTS test ( colA INT, colB INT )");
for (var i = 0; i <= 3; i++)
{
    dbConn.Execute("INSERT INTO test VALUES (" + i + ", " + i + ")");
}


var dbCmd = new DbCommand();
dbCmd.Connection = dbConn;
dbCmd.CommandText = "SELECT * FROM test WHERE colA = ? and colB = ?";

// Preparing a DbCommand allows reuse of the SQL command
var colVals = [[1,1],[2,2],[3,3]];
for (var idx = 0; idx < colVals.length; idx++)
{
    dbCmd.Parameters = [{
                            "Type": DbParameters.Int,
                            "Value": colVals[idx][0]
                        },
                        {
                            "Type": DbParameters.Int,
                            "Value": colVals[idx][1]
                        }];
    var dbResult = dbCmd.Execute();
    Response.Write(dbResult.toSource() + "\n");
}
```

h2(#seealso). See also

* [[DbConnection]]
* [[DbParameters]]
* [[DbRecordset]]